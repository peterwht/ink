name: continuous-integration

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    paths-ignore:
      - '**/*.md'
      - 'CODEOWNERS'
      - 'LICENSE'
      - 'CODE_OF_CONDUCT.adoc'
      - 'FILE_HEADER'
  push:
    branches:
      - master
      - v[0-9]+.[0-9]+.*           # i.e. v1.0, v2.1rc1
    tags:
      - v*
    paths-ignore:
      - '**/*.md'
      - 'CODEOWNERS'
      - 'LICENSE'
      - 'CODE_OF_CONDUCT.adoc'
      - 'FILE_HEADER'

env:
  IMAGE:                           paritytech/ci-unified:bullseye-1.75.0
  CARGO_TARGET_DIR:                /ci-cache/${{ github.repository }}/targets/${{ github.ref_name }}/${{ github.job }}
  CARGO_INCREMENTAL:               0
  PURELY_STD_CRATES:               ink/codegen metadata engine e2e e2e/macro ink/ir
  ALSO_WASM_CRATES:                env storage storage/traits allocator prelude primitives ink ink/macro
  # TODO `cargo clippy --all-targets --all-features` for this crate
  # currently fails on `stable`, but succeeds on `nightly`. This is due to
  # this fix not yet in stable: https://github.com/rust-lang/rust-clippy/issues/8895.
  # Remove the following line again as soon as `clippy` on stable succeeds again.
  CLIPPY_ALLOWED:                  clippy::extra_unused_lifetimes
  # We plan to fully support RISC-V as a bytecode for contracts soon.
  # RISC-V does not have a standard library in contrast to Wasm. Compiling against
  # this target also makes sure that we don't pull in `std` by accident (through dependencies).
  # RISC-V is a modular architecture. We might switch to a different flavor with more features
  # later. For example, `riscv32imc-unknown-none-elf`.
  RISCV_TARGET:                    riscv32ema-unknown-none-elf

concurrency:
  # Cancel in-progress jobs triggered only on pull_requests
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

### lint

jobs:
  set-image:
    # GitHub Actions does not allow using 'env' in a container context.
    # This workaround sets the container image for each job using 'set-image' job output.
    runs-on: ubuntu-latest
    outputs:
      IMAGE: ${{ steps.set_image.outputs.IMAGE }}
    steps:
      - id: set_image
        run: echo "IMAGE=${{ env.IMAGE }}" >> $GITHUB_OUTPUT

  spellcheck:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: [set-image]
    container:
      image: ${{ needs.set-image.outputs.IMAGE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 100

      - name: Rust Info
        uses: ./.github/rust-info

      - name: Check Spelling
        run: |
          cargo spellcheck check -v --cfg=.config/cargo_spellcheck.toml --checkers hunspell --code 1 -- recursive .
          cargo spellcheck check -v --cfg=.config/cargo_spellcheck.toml --checkers hunspell --code 1 -- recursive ./integration-tests/*

  check:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: [set-image]
    container:
      image: ${{ needs.set-image.outputs.IMAGE }}
    strategy:
      fail-fast: false
      matrix:
        type: [STD, WASM, RISCV]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 100

      - name: Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          cache-directories: ${{ env.CARGO_TARGET_DIR }}

      - name: Rust Info
        uses: ./.github/rust-info

      - name: Check RISCV
        if: ${{ matrix.type == 'RISCV' }}
        env:
          RUSTC_BOOTSTRAP: 1
          RUSTUP_TOOLCHAIN: rve-nightly
        run: |
          for crate in ${ALSO_WASM_CRATES}; do
            cargo check --no-default-features --target $RISCV_TARGET -Zbuild-std="core,alloc" \
              --manifest-path ./crates/${crate}/Cargo.toml;
          done

### examples

  examples-contract-build:
    runs-on: ubuntu-latest
    needs: [set-image, build]
    defaults:
      run:
        shell: bash
    container:
      image: ${{ needs.set-image.outputs.IMAGE }}
    strategy:
      fail-fast: false
      matrix:
        type: [RISCV]
        partition: [1, 2, 3, 4]
        exclude:
          - type: RISCV
            partition: 2
          - type: RISCV
            partition: 3
          - type: RISCV
            partition: 4
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 100

      - name: Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          cache-directories: ${{ env.CARGO_TARGET_DIR }}

      - name: Rust Info
        uses: ./.github/rust-info

      - name: Build Contract WASM Examples
        if: ${{ matrix.type == 'WASM' }}
        run: |
          rustup component add rust-src --toolchain stable
          cargo contract -V
          # Build all examples
          scripts/for_all_contracts_exec.sh --path integration-tests --partition ${{ matrix.partition }}/4 -- cargo contract build --release --manifest-path {}
          if [ ${{ matrix.partition }} -eq 4 ]; then
            # Build the different features for the conditional compilation example
            pushd ./integration-tests/public/conditional-compilation
            cargo contract build --release --features "foo"
            cargo contract build --release --features "bar"
            cargo contract build --release --features "foo, bar"
            popd
          fi

      - name: Build Contract RISCV Examples
        if: ${{ matrix.type == 'RISCV' }}
        env:
          RUSTC_BOOTSTRAP: 1
          RUSTUP_TOOLCHAIN: rve-nightly
        run: |
          rustup component add rust-src --toolchain stable
          cargo contract -V
          # We skip some examples for those reasons:
          # This uses dlmalloc which is only supported on select targets.
          #   - custom_allocator
          # Pulls in sp-std which needlessly requires atomic pointers (TODO: Fix sp-std and enable this example)
          #   - call-runtime
          scripts/for_all_contracts_exec.sh --path integration-tests --ignore public/custom-allocator --ignore public/call-runtime --ignore public/contract-xcm \
            -- cargo build --manifest-path {} --no-default-features --target $RISCV_TARGET -Zbuild-std="core,alloc"
